{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "locales/locales.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "sourceLocale",
          "default": "`en`",
          "description": "The locale code that templates in this source code are written in."
        },
        {
          "kind": "variable",
          "name": "targetLocales",
          "type": {
            "text": "array"
          },
          "default": "[\n  ,\n]",
          "description": "The other locale codes that this application is localized into. Sorted\nlexicographically."
        },
        {
          "kind": "variable",
          "name": "allLocales",
          "type": {
            "text": "array"
          },
          "default": "[\n  `en`,\n]",
          "description": "All valid project locale codes. Sorted lexicographically."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceLocale",
          "declaration": {
            "name": "sourceLocale",
            "module": "locales/locales.js"
          }
        },
        {
          "kind": "js",
          "name": "targetLocales",
          "declaration": {
            "name": "targetLocales",
            "module": "locales/locales.js"
          }
        },
        {
          "kind": "js",
          "name": "allLocales",
          "declaration": {
            "name": "allLocales",
            "module": "locales/locales.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "notificationsStoreContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "notificationsStoreContext",
          "declaration": {
            "name": "notificationsStoreContext",
            "module": "src/context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./notifications-store.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./notifications-client.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./context.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mocks.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NotificationsZomeMock",
          "members": [
            {
              "kind": "field",
              "name": "notifications",
              "default": "new HoloHashMap<\n\t\tActionHash,\n\t\t{\n\t\t\tdeletes: Array<SignedActionHashed<Delete>>;\n\t\t\trevisions: Array<Record>;\n\t\t}\n\t>()",
              "description": "Notification"
            },
            {
              "kind": "field",
              "name": "notificationsForRecipient",
              "default": "new HoloHashMap<ActionHash, Link[]>()"
            },
            {
              "kind": "method",
              "name": "create_notification",
              "return": {
                "type": {
                  "text": "Promise<Record>"
                }
              },
              "parameters": [
                {
                  "name": "notification",
                  "type": {
                    "text": "Notification"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "get_notification",
              "return": {
                "type": {
                  "text": "Promise<Record | undefined>"
                }
              },
              "parameters": [
                {
                  "name": "notificationHash",
                  "type": {
                    "text": "ActionHash"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "get_all_deletes_for_notification",
              "return": {
                "type": {
                  "text": "Promise<Array<SignedActionHashed<Delete>> | undefined>"
                }
              },
              "parameters": [
                {
                  "name": "notificationHash",
                  "type": {
                    "text": "ActionHash"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "get_oldest_delete_for_notification",
              "return": {
                "type": {
                  "text": "Promise<SignedActionHashed<Delete> | undefined>"
                }
              },
              "parameters": [
                {
                  "name": "notificationHash",
                  "type": {
                    "text": "ActionHash"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "delete_notification",
              "return": {
                "type": {
                  "text": "Promise<ActionHash>"
                }
              },
              "parameters": [
                {
                  "name": "original_notification_hash",
                  "type": {
                    "text": "ActionHash"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "get_notifications_for_recipient",
              "return": {
                "type": {
                  "text": "Promise<Array<Link>>"
                }
              },
              "parameters": [
                {
                  "name": "recipient",
                  "type": {
                    "text": "AgentPubKey"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "ZomeMock",
            "package": "@holochain-open-dev/utils"
          }
        },
        {
          "kind": "function",
          "name": "sampleNotification",
          "return": {
            "type": {
              "text": "Promise<Notification>"
            }
          },
          "parameters": [
            {
              "name": "client",
              "type": {
                "text": "NotificationsClient"
              }
            },
            {
              "name": "partialNotification",
              "default": "{}",
              "type": {
                "text": "Partial<Notification>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NotificationsZomeMock",
          "declaration": {
            "name": "NotificationsZomeMock",
            "module": "src/mocks.ts"
          }
        },
        {
          "kind": "js",
          "name": "sampleNotification",
          "declaration": {
            "name": "sampleNotification",
            "module": "src/mocks.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/notifications-client.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NotificationsClient",
          "members": [
            {
              "kind": "method",
              "name": "createNotification",
              "return": {
                "type": {
                  "text": "Promise<EntryRecord<Notification>>"
                }
              },
              "parameters": [
                {
                  "name": "notification",
                  "type": {
                    "text": "Notification"
                  }
                }
              ],
              "description": "Notification"
            },
            {
              "kind": "method",
              "name": "getNotification",
              "return": {
                "type": {
                  "text": "Promise<EntryRecord<Notification> | undefined>"
                }
              },
              "parameters": [
                {
                  "name": "notificationHash",
                  "type": {
                    "text": "ActionHash"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "markNotificationsAsRead",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "notificationsHashes",
                  "type": {
                    "text": "ActionHash[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "dismissNotifications",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "notificationsHashes",
                  "type": {
                    "text": "ActionHash[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllDeletesForNotification",
              "return": {
                "type": {
                  "text": "Promise<Array<SignedActionHashed<Delete>> | undefined>"
                }
              },
              "parameters": [
                {
                  "name": "originalNotificationHash",
                  "type": {
                    "text": "ActionHash"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getUndismissedNotifications",
              "return": {
                "type": {
                  "text": "Promise<Array<Link>>"
                }
              }
            },
            {
              "kind": "method",
              "name": "getReadNotifications",
              "return": {
                "type": {
                  "text": "Promise<Array<Link>>"
                }
              }
            },
            {
              "kind": "method",
              "name": "getDismissedNotifications",
              "return": {
                "type": {
                  "text": "Promise<\n\t\tArray<[SignedActionHashed<CreateLink>, SignedActionHashed<DeleteLink>[]]>\n\t>"
                }
              }
            }
          ],
          "superclass": {
            "name": "ZomeClient",
            "package": "@holochain-open-dev/utils"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NotificationsClient",
          "declaration": {
            "name": "NotificationsClient",
            "module": "src/notifications-client.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/notifications-store.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NotificationsStore",
          "members": [
            {
              "kind": "field",
              "name": "notifications",
              "default": "new LazyHoloHashMap((notificationHash: ActionHash) => ({\n\t\tentry: immutableEntrySignal(() =>\n\t\t\tthis.client.getNotification(notificationHash),\n\t\t),\n\t\tdeletes: deletesForEntrySignal(this.client, notificationHash, () =>\n\t\t\tthis.client.getAllDeletesForNotification(notificationHash),\n\t\t),\n\t}))",
              "description": "Notification"
            },
            {
              "kind": "field",
              "name": "undismissedNotificationsLinks",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "readNotificationsLinks",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "readNotifications",
              "default": "new AsyncComputed(() => {\n\t\tconst readNotificationsLinks = this.readNotificationsLinks.get();\n\t\tconst undismissedNotifications = this.undismissedNotificationsLinks.get();\n\t\tif (readNotificationsLinks.status !== 'completed')\n\t\t\treturn readNotificationsLinks;\n\t\tif (undismissedNotifications.status !== 'completed')\n\t\t\treturn undismissedNotifications;\n\n\t\t/** Aggregate the read notification hashes and filter them by whether they've been dismissed */\n\n\t\tconst allReadNotificationsHashes = uniquify(\n\t\t\tArray.from([] as ActionHash[]).concat(\n\t\t\t\t...readNotificationsLinks.value.map(\n\t\t\t\t\tlink => decode(link.tag) as ActionHash[],\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\tconst undismissedNotificationsHashes = undismissedNotifications.value.map(\n\t\t\tl => encodeHashToBase64(l.target),\n\t\t);\n\n\t\tconst notificationsHashes = allReadNotificationsHashes.filter(hash =>\n\t\t\tundismissedNotificationsHashes.includes(encodeHashToBase64(hash)),\n\t\t);\n\n\t\t/* If a notification was persistent and has been read but was deleted (usually by someone else performing the action that the notification required), then we dismiss the notification */\n\n\t\t// const deletes = joinAsync(\n\t\t// \tnotificationsHashes.map(hash =>\n\t\t// \t\tthis.notifications.get(hash).deletes.get(),\n\t\t// \t),\n\t\t// );\n\t\t// const entries = joinAsync(\n\t\t// \tnotificationsHashes.map(hash =>\n\t\t// \t\tthis.notifications.get(hash).entry.get(),\n\t\t// \t),\n\t\t// );\n\t\t// if (entries.status !== 'completed') return entries;\n\t\t// if (deletes.status !== 'completed') return deletes;\n\n\t\t// const nonDeletedNotificationHashes: ActionHash[] = [];\n\t\t// const notificationsToDismiss: ActionHash[] = [];\n\n\t\t// for (let i = 0; i < notificationsHashes.length; i++) {\n\t\t// \tif (!entries.value[i].entry.persistent || deletes.value[i].length === 0) {\n\t\t// \t\tnonDeletedNotificationHashes.push(notificationsHashes[i]);\n\t\t// \t} else {\n\t\t// \t\tnotificationsToDismiss.push(notificationsHashes[i]);\n\t\t// \t}\n\t\t// }\n\n\t\t// if (notificationsToDismiss.length > 0) {\n\t\t// \tthis.client.dismissNotifications(notificationsToDismiss);\n\t\t// }\n\n\t\tconst value = slice(this.notifications, notificationsHashes);\n\t\treturn {\n\t\t\tstatus: 'completed',\n\t\t\tvalue,\n\t\t};\n\t})"
            },
            {
              "kind": "field",
              "name": "unreadNotifications",
              "default": "new AsyncComputed(() => {\n\t\tconst readNotifications = this.readNotifications.get();\n\t\tconst undismissedNotifications = this.undismissedNotificationsLinks.get();\n\n\t\tif (readNotifications.status !== 'completed') return readNotifications;\n\t\tif (undismissedNotifications.status !== 'completed')\n\t\t\treturn undismissedNotifications;\n\n\t\tconst readNotificationsHashes = Array.from(\n\t\t\treadNotifications.value.keys(),\n\t\t).map(h => encodeHashToBase64(h));\n\n\t\tconst links = undismissedNotifications.value.filter(\n\t\t\tlink =>\n\t\t\t\t!readNotificationsHashes.includes(encodeHashToBase64(link.target)),\n\t\t);\n\t\tconst value = slice(this.notifications, uniquify(links.map(l => l.target)));\n\t\treturn {\n\t\t\tstatus: 'completed',\n\t\t\tvalue,\n\t\t};\n\t})"
            },
            {
              "kind": "field",
              "name": "deletedNotificationsLinks"
            },
            {
              "kind": "field",
              "name": "dismissedNotifications",
              "default": "new AsyncComputed(() => {\n\t\tconst deletedLinks = this.deletedNotificationsLinks.get();\n\t\tif (deletedLinks.status !== 'completed') return deletedLinks;\n\n\t\tconst value = slice(\n\t\t\tthis.notifications,\n\t\t\tdeletedLinks.value.map(l => l[0].hashed.content.target_address),\n\t\t);\n\n\t\treturn {\n\t\t\tstatus: 'completed',\n\t\t\tvalue,\n\t\t};\n\t})"
            },
            {
              "kind": "field",
              "name": "notificationsByTypeAndGroup",
              "default": "new LazyMap(\n\t\t(notificationType: string) =>\n\t\t\tnew LazyMap((notificationGroup: string) => ({\n\t\t\t\tread: new AsyncComputed(() => {\n\t\t\t\t\tconst notifications = this.readNotifications.get();\n\t\t\t\t\tif (notifications.status !== 'completed') return notifications;\n\n\t\t\t\t\tconst entries = joinAsyncMap(\n\t\t\t\t\t\tmapValues(notifications.value, n => n.entry.get()),\n\t\t\t\t\t);\n\t\t\t\t\tif (entries.status !== 'completed') return entries;\n\n\t\t\t\t\tconst value = pickBy(\n\t\t\t\t\t\tentries.value,\n\t\t\t\t\t\tn =>\n\t\t\t\t\t\t\tn.entry.notification_type === notificationType &&\n\t\t\t\t\t\t\tn.entry.notification_group === notificationGroup,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'completed',\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t\tunread: new AsyncComputed(() => {\n\t\t\t\t\tconst notifications = this.unreadNotifications.get();\n\t\t\t\t\tif (notifications.status !== 'completed') return notifications;\n\n\t\t\t\t\tconst entries = joinAsyncMap(\n\t\t\t\t\t\tmapValues(notifications.value, n => n.entry.get()),\n\t\t\t\t\t);\n\t\t\t\t\tif (entries.status !== 'completed') return entries;\n\n\t\t\t\t\tconst value = pickBy(\n\t\t\t\t\t\tentries.value,\n\t\t\t\t\t\tn =>\n\t\t\t\t\t\t\tn.entry.notification_type === notificationType &&\n\t\t\t\t\t\t\tn.entry.notification_group === notificationGroup,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tstatus: 'completed',\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t})),\n\t)",
              "description": "Helpers for consuming UIs"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NotificationsStore",
          "declaration": {
            "name": "NotificationsStore",
            "module": "src/notifications-store.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/my-notifications-icon-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MyNotificationsIconButton",
          "members": [],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@holochain-open-dev/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "my-notifications-icon-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MyNotificationsIconButton",
          "declaration": {
            "name": "MyNotificationsIconButton",
            "module": "src/elements/my-notifications-icon-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "my-notifications-icon-button",
          "declaration": {
            "name": "MyNotificationsIconButton",
            "module": "src/elements/my-notifications-icon-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/my-notifications-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MyNotifications",
          "members": [
            {
              "kind": "method",
              "name": "renderNotificationGroup",
              "parameters": [
                {
                  "name": "read",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "persistent",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "notificationGroup",
                  "type": {
                    "text": "NotificationGroup"
                  }
                },
                {
                  "name": "last",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "notificationInfo",
              "return": {
                "type": {
                  "text": "AsyncResult<NotificationInfo>"
                }
              },
              "parameters": [
                {
                  "name": "notificationHash",
                  "type": {
                    "text": "ActionHash"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNotificationsGroups"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@holochain-open-dev/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "my-notifications-list",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MyNotifications",
          "declaration": {
            "name": "MyNotifications",
            "module": "src/elements/my-notifications-list.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "my-notifications-list",
          "declaration": {
            "name": "MyNotifications",
            "module": "src/elements/my-notifications-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/notifications-context.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NotificationsContext",
          "members": [
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "NotificationsStore"
              },
              "attribute": "store"
            }
          ],
          "attributes": [
            {
              "name": "store",
              "type": {
                "text": "NotificationsStore"
              },
              "fieldName": "store"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "notifications-context",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NotificationsContext",
          "declaration": {
            "name": "NotificationsContext",
            "module": "src/elements/notifications-context.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "notifications-context",
          "declaration": {
            "name": "NotificationsContext",
            "module": "src/elements/notifications-context.ts"
          }
        }
      ]
    }
  ]
}
